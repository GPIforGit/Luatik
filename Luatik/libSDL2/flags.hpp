#pragma once

// WindowShapeMode

const luaEXT_constpair flag_WindowShapeMode[] = {
	{ "DEFAULT", ShapeModeDefault},
	{ "BINARIZE", ShapeModeBinarizeAlpha},
	{ "REVERSEBINARIZE", ShapeModeReverseBinarizeAlpha},
	{ "COLOR", ShapeModeColorKey},
	{NULL,NULL}
};
inline WindowShapeMode checkWindowShapeMode(lua_State* L, int index) {
	return (WindowShapeMode)luaEXT_checkflag(L, index, flag_WindowShapeMode);
}
inline void pushWindowShapeMode(lua_State* L, WindowShapeMode value) {
	luaEXT_pushflag(L, value, flag_WindowShapeMode);
}

// BlendMode

const luaEXT_constpair flag_BlendMode[] = {
	{ "NONE", SDL_BLENDMODE_NONE},
	{ "BLEND", SDL_BLENDMODE_BLEND},
	{ "ADD", SDL_BLENDMODE_ADD},
	{ "MOD", SDL_BLENDMODE_MOD},
	{ "MUL", SDL_BLENDMODE_MUL},
	{ "INVALID", SDL_BLENDMODE_INVALID},
	{ NULL,NULL}
};
inline SDL_BlendMode checkBlendMode(lua_State* L, int index) {
	return (SDL_BlendMode)luaEXT_checkflagorinteger(L, index, flag_BlendMode);
}
inline void pushBlendMode(lua_State* L, SDL_BlendMode value) {
	luaEXT_pushflagorinteger(L, value, flag_BlendMode);
}

// BlendOperation

const luaEXT_constpair flag_BlendOperation[] = {
	{ "ADD", SDL_BLENDOPERATION_ADD},
	{ "SUBTRACT", SDL_BLENDOPERATION_SUBTRACT},
	{ "REV_SUBTRACT", SDL_BLENDOPERATION_REV_SUBTRACT},
	{ "MINIMUM", SDL_BLENDOPERATION_MINIMUM},
	{ "MAXIMUM", SDL_BLENDOPERATION_MAXIMUM},
	{ NULL,NULL}
};
inline SDL_BlendOperation checkBlendOperation(lua_State* L, int index) {
	return (SDL_BlendOperation)luaEXT_checkflag(L, index, flag_BlendOperation);
}

// BlendFactor

const luaEXT_constpair flag_BlendFactor[] = {
	{"ZERO", SDL_BLENDFACTOR_ZERO},
	{"ONE", SDL_BLENDFACTOR_ONE},
	{"SRC_COLOR", SDL_BLENDFACTOR_SRC_COLOR},
	{"ONE_MINUS_SRC_COLOR", SDL_BLENDFACTOR_ONE_MINUS_SRC_COLOR},
	{"SRC_ALPHA", SDL_BLENDFACTOR_SRC_ALPHA},
	{"ONE_MINUS_SRC_ALPHA", SDL_BLENDFACTOR_ONE_MINUS_SRC_ALPHA},
	{"DST_COLOR", SDL_BLENDFACTOR_DST_COLOR},
	{"ONE_MINUS_DST_COLOR", SDL_BLENDFACTOR_ONE_MINUS_DST_COLOR},
	{"DST_ALPHA", SDL_BLENDFACTOR_DST_ALPHA},
	{"ONE_MINUS_DST_ALPHA", SDL_BLENDFACTOR_ONE_MINUS_DST_ALPHA},
	{ NULL,NULL }
};
inline SDL_BlendFactor checkBlendFactor(lua_State* L, int index) {
	return (SDL_BlendFactor)luaEXT_checkflag(L, index, flag_BlendFactor);
}

// EventType

const luaEXT_constpair flag_EventType[] = {
	{ "FIRSTEVENT", SDL_FIRSTEVENT},
	{ "QUIT", SDL_QUIT},
	{ "APP_TERMINATING", SDL_APP_TERMINATING},
	{ "APP_LOWMEMORY", SDL_APP_LOWMEMORY},
	{ "APP_WILLENTERBACKGROUND", SDL_APP_WILLENTERBACKGROUND},
	{ "APP_DIDENTERBACKGROUND", SDL_APP_DIDENTERBACKGROUND},
	{ "APP_WILLENTERFOREGROUND", SDL_APP_WILLENTERFOREGROUND},
	{ "APP_DIDENTERFOREGROUND", SDL_APP_DIDENTERFOREGROUND},
	{ "LOCALECHANGED", SDL_LOCALECHANGED},
	{ "DISPLAYEVENT", SDL_DISPLAYEVENT},
	{ "WINDOWEVENT", SDL_WINDOWEVENT},
	{ "SYSWMEVENT", SDL_SYSWMEVENT},
	{ "KEYDOWN", SDL_KEYDOWN},
	{ "KEYUP", SDL_KEYUP},
	{ "TEXTEDITING", SDL_TEXTEDITING},
	{ "TEXTINPUT", SDL_TEXTINPUT},
	{ "KEYMAPCHANGED", SDL_KEYMAPCHANGED},
	{ "MOUSEMOTION", SDL_MOUSEMOTION},
	{ "MOUSEBUTTONDOWN", SDL_MOUSEBUTTONDOWN},
	{ "MOUSEBUTTONUP", SDL_MOUSEBUTTONUP},
	{ "MOUSEWHEEL", SDL_MOUSEWHEEL},
	{ "JOYAXISMOTION", SDL_JOYAXISMOTION},
	{ "JOYBALLMOTION", SDL_JOYBALLMOTION},
	{ "JOYHATMOTION", SDL_JOYHATMOTION},
	{ "JOYBUTTONDOWN", SDL_JOYBUTTONDOWN},
	{ "JOYBUTTONUP", SDL_JOYBUTTONUP},
	{ "JOYDEVICEADDED", SDL_JOYDEVICEADDED},
	{ "JOYDEVICEREMOVED", SDL_JOYDEVICEREMOVED},
	{ "CONTROLLERAXISMOTION", SDL_CONTROLLERAXISMOTION},\
	{ "CONTROLLERBUTTONDOWN", SDL_CONTROLLERBUTTONDOWN},
	{ "CONTROLLERBUTTONUP", SDL_CONTROLLERBUTTONUP},
	{ "CONTROLLERDEVICEADDED", SDL_CONTROLLERDEVICEADDED},
	{ "CONTROLLERDEVICEREMOVED", SDL_CONTROLLERDEVICEREMOVED},
	{ "CONTROLLERDEVICEREMAPPED", SDL_CONTROLLERDEVICEREMAPPED},
	{ "CONTROLLERTOUCHPADDOWN", SDL_CONTROLLERTOUCHPADDOWN},
	{ "CONTROLLERTOUCHPADMOTION", SDL_CONTROLLERTOUCHPADMOTION},
	{ "CONTROLLERTOUCHPADUP", SDL_CONTROLLERTOUCHPADUP},
	{ "CONTROLLERSENSORUPDATE", SDL_CONTROLLERSENSORUPDATE},
	{ "FINGERDOWN", SDL_FINGERDOWN},
	{ "FINGERUP", SDL_FINGERUP},
	{ "FINGERMOTION", SDL_FINGERMOTION},
	{ "DOLLARGESTURE", SDL_DOLLARGESTURE},
	{ "DOLLARRECORD", SDL_DOLLARRECORD},
	{ "MULTIGESTURE", SDL_MULTIGESTURE},
	{ "CLIPBOARDUPDATE", SDL_CLIPBOARDUPDATE},
	{ "DROPFILE", SDL_DROPFILE},
	{ "DROPTEXT", SDL_DROPTEXT},
	{ "DROPBEGIN", SDL_DROPBEGIN},
	{ "DROPCOMPLETE", SDL_DROPCOMPLETE},
	{ "AUDIODEVICEADDED", SDL_AUDIODEVICEADDED},
	{ "AUDIODEVICEREMOVED", SDL_AUDIODEVICEREMOVED},
	{ "SENSORUPDATE", SDL_SENSORUPDATE},
	{ "RENDER_TARGETS_RESET", SDL_RENDER_TARGETS_RESET},
	{ "RENDER_DEVICE_RESET", SDL_RENDER_DEVICE_RESET},
	{ "POLLSENTINEL", SDL_POLLSENTINEL},
	{ "USEREVENT", SDL_USEREVENT},
	{ "LASTEVENT", SDL_LASTEVENT},
	{ NULL, NULL },
};
inline SDL_EventType checkEventType(lua_State* L, int index) {
	return (SDL_EventType)luaEXT_checkflag(L, index, flag_EventType);
};
inline void pushEventType(lua_State* L, SDL_EventType value) {
	luaEXT_pushflag(L, value, flag_EventType);
}

// EventState

const luaEXT_constpair flag_EventState[] = {
	{ "QUERY", SDL_QUERY },
	{ "DISABLE", SDL_DISABLE },
	{ "IGNORE", SDL_IGNORE },
	{ "ENABLE", SDL_ENABLE },
	{ NULL, NULL },
};
inline Uint32 checkEventState(lua_State* L, int index) {
	return (Uint32)luaEXT_checkflag(L, index, flag_EventState);
}
inline void pushEventState(lua_State* L, Uint32 value) {
	luaEXT_pushflag(L, value, flag_EventState);
}

// Hints

const luaEXT_stringpair flag_Hints[] = {
	{ "FORCE_RAISEWINDOW", SDL_HINT_FORCE_RAISEWINDOW},
	{ "IME_SUPPORT_EXTENDED_TEXT", SDL_HINT_IME_SUPPORT_EXTENDED_TEXT},
	{ "JOYSTICK_GAMECUBE_RUMBLE_BRAKE", SDL_HINT_JOYSTICK_GAMECUBE_RUMBLE_BRAKE},
	{ "JOYSTICK_HIDAPI_COMBINE_JOY_CONS", SDL_HINT_JOYSTICK_HIDAPI_COMBINE_JOY_CONS},
	{ "JOYSTICK_HIDAPI_NINTENDO_CLASSIC", SDL_HINT_JOYSTICK_HIDAPI_NINTENDO_CLASSIC},
	{ "JOYSTICK_HIDAPI_SHIELD", SDL_HINT_JOYSTICK_HIDAPI_SHIELD},
	{ "JOYSTICK_HIDAPI_JOYCON_HOME_LED", SDL_HINT_JOYSTICK_HIDAPI_JOYCON_HOME_LED},
	{ "JOYSTICK_HIDAPI_SWITCH_PLAYER_LED", SDL_HINT_JOYSTICK_HIDAPI_SWITCH_PLAYER_LED},
	{ "JOYSTICK_ROG_CHAKRAM", SDL_HINT_JOYSTICK_ROG_CHAKRAM},
	{ "LINUX_DIGITAL_HATS", SDL_HINT_LINUX_DIGITAL_HATS},
	{ "LINUX_HAT_DEADZONES", SDL_HINT_LINUX_HAT_DEADZONES},
	{ "MAC_OPENGL_ASYNC_DISPATCH", SDL_HINT_MAC_OPENGL_ASYNC_DISPATCH},
	{ "MOUSE_RELATIVE_MODE_CENTER", SDL_HINT_MOUSE_RELATIVE_MODE_CENTER},
	{ "MOUSE_RELATIVE_WARP_MOTION", SDL_HINT_MOUSE_RELATIVE_WARP_MOTION},
	{ "MOUSE_AUTO_CAPTURE", SDL_HINT_MOUSE_AUTO_CAPTURE},
	{ "VITA_TOUCH_MOUSE_DEVICE", SDL_HINT_VITA_TOUCH_MOUSE_DEVICE},
	{ "VIDEO_WAYLAND_PREFER_LIBDECOR", SDL_HINT_VIDEO_WAYLAND_PREFER_LIBDECOR},
	{ "VIDEO_WAYLAND_MODE_EMULATION", SDL_HINT_VIDEO_WAYLAND_MODE_EMULATION},
	{ "VIDEO_FOREIGN_WINDOW_OPENGL", SDL_HINT_VIDEO_FOREIGN_WINDOW_OPENGL},
	{ "VIDEO_FOREIGN_WINDOW_VULKAN", SDL_HINT_VIDEO_FOREIGN_WINDOW_VULKAN},
	{ "WINDOWS_DPI_AWARENESS", SDL_HINT_WINDOWS_DPI_AWARENESS},
	{ "WINDOWS_DPI_SCALING", SDL_HINT_WINDOWS_DPI_SCALING},
	{ "DIRECTINPUT_ENABLED", SDL_HINT_DIRECTINPUT_ENABLED},
	{ "X11_WINDOW_TYPE", SDL_HINT_X11_WINDOW_TYPE},
	{ "QUIT_ON_LAST_WINDOW_CLOSE", SDL_HINT_QUIT_ON_LAST_WINDOW_CLOSE},
	{ "VIDEODRIVER", SDL_HINT_VIDEODRIVER},
	{ "AUDIODRIVER ", SDL_HINT_AUDIODRIVER},
	{ "KMSDRM_DEVICE_INDEX", SDL_HINT_KMSDRM_DEVICE_INDEX},
	{ "TRACKPAD_IS_TOUCH_ONLY", SDL_HINT_TRACKPAD_IS_TOUCH_ONLY},

	{ "ACCELEROMETER_AS_JOYSTICK", SDL_HINT_ACCELEROMETER_AS_JOYSTICK },
	{ "ALLOW_ALT_TAB_WHILE_GRABBED", SDL_HINT_ALLOW_ALT_TAB_WHILE_GRABBED },
	{ "ALLOW_TOPMOST", SDL_HINT_ALLOW_TOPMOST },
	{ "ANDROID_APK_EXPANSION_MAIN_FILE_VERSION", SDL_HINT_ANDROID_APK_EXPANSION_MAIN_FILE_VERSION },
	{ "ANDROID_APK_EXPANSION_PATCH_FILE_VERSION", SDL_HINT_ANDROID_APK_EXPANSION_PATCH_FILE_VERSION },
	{ "ANDROID_BLOCK_ON_PAUSE", SDL_HINT_ANDROID_BLOCK_ON_PAUSE },
	{ "ANDROID_BLOCK_ON_PAUSE_PAUSEAUDIO", SDL_HINT_ANDROID_BLOCK_ON_PAUSE_PAUSEAUDIO },
	{ "ANDROID_TRAP_BACK_BUTTON", SDL_HINT_ANDROID_TRAP_BACK_BUTTON },
	{ "APP_NAME", SDL_HINT_APP_NAME },
	{ "APPLE_TV_CONTROLLER_UI_EVENTS", SDL_HINT_APPLE_TV_CONTROLLER_UI_EVENTS },
	{ "APPLE_TV_REMOTE_ALLOW_ROTATION", SDL_HINT_APPLE_TV_REMOTE_ALLOW_ROTATION },
	{ "AUDIO_CATEGORY", SDL_HINT_AUDIO_CATEGORY },
	{ "AUDIO_DEVICE_APP_NAME", SDL_HINT_AUDIO_DEVICE_APP_NAME },
	{ "AUDIO_DEVICE_STREAM_NAME", SDL_HINT_AUDIO_DEVICE_STREAM_NAME },
	{ "AUDIO_DEVICE_STREAM_ROLE", SDL_HINT_AUDIO_DEVICE_STREAM_ROLE },
	{ "AUDIO_RESAMPLING_MODE", SDL_HINT_AUDIO_RESAMPLING_MODE },
	{ "AUTO_UPDATE_JOYSTICKS", SDL_HINT_AUTO_UPDATE_JOYSTICKS },
	{ "AUTO_UPDATE_SENSORS", SDL_HINT_AUTO_UPDATE_SENSORS },
	{ "BMP_SAVE_LEGACY_FORMAT", SDL_HINT_BMP_SAVE_LEGACY_FORMAT },
	{ "DISPLAY_USABLE_BOUNDS", SDL_HINT_DISPLAY_USABLE_BOUNDS },
	{ "EMSCRIPTEN_ASYNCIFY", SDL_HINT_EMSCRIPTEN_ASYNCIFY },
	{ "EMSCRIPTEN_KEYBOARD_ELEMENT", SDL_HINT_EMSCRIPTEN_KEYBOARD_ELEMENT },
	{ "ENABLE_STEAM_CONTROLLERS", SDL_HINT_ENABLE_STEAM_CONTROLLERS },
	{ "EVENT_LOGGING", SDL_HINT_EVENT_LOGGING },
	{ "FRAMEBUFFER_ACCELERATION", SDL_HINT_FRAMEBUFFER_ACCELERATION },
	{ "GAMECONTROLLERCONFIG", SDL_HINT_GAMECONTROLLERCONFIG },
	{ "GAMECONTROLLERCONFIG_FILE", SDL_HINT_GAMECONTROLLERCONFIG_FILE },
	{ "GAMECONTROLLERTYPE", SDL_HINT_GAMECONTROLLERTYPE },
	{ "GAMECONTROLLER_IGNORE_DEVICES", SDL_HINT_GAMECONTROLLER_IGNORE_DEVICES },
	{ "GAMECONTROLLER_IGNORE_DEVICES_EXCEPT", SDL_HINT_GAMECONTROLLER_IGNORE_DEVICES_EXCEPT },
	{ "GAMECONTROLLER_USE_BUTTON_LABELS", SDL_HINT_GAMECONTROLLER_USE_BUTTON_LABELS },
	{ "GRAB_KEYBOARD", SDL_HINT_GRAB_KEYBOARD },
	{ "IDLE_TIMER_DISABLED", SDL_HINT_IDLE_TIMER_DISABLED },
	{ "IME_INTERNAL_EDITING", SDL_HINT_IME_INTERNAL_EDITING },
	{ "IME_SHOW_UI", SDL_HINT_IME_SHOW_UI },
	{ "IOS_HIDE_HOME_INDICATOR", SDL_HINT_IOS_HIDE_HOME_INDICATOR },
	{ "JOYSTICK_ALLOW_BACKGROUND_EVENTS", SDL_HINT_JOYSTICK_ALLOW_BACKGROUND_EVENTS },
	{ "JOYSTICK_HIDAPI", SDL_HINT_JOYSTICK_HIDAPI },
	{ "JOYSTICK_HIDAPI_GAMECUBE", SDL_HINT_JOYSTICK_HIDAPI_GAMECUBE },
	{ "JOYSTICK_HIDAPI_JOY_CONS", SDL_HINT_JOYSTICK_HIDAPI_JOY_CONS },
	{ "JOYSTICK_HIDAPI_LUNA", SDL_HINT_JOYSTICK_HIDAPI_LUNA },
	{ "JOYSTICK_HIDAPI_PS4", SDL_HINT_JOYSTICK_HIDAPI_PS4 },
	{ "JOYSTICK_HIDAPI_PS4_RUMBLE", SDL_HINT_JOYSTICK_HIDAPI_PS4_RUMBLE },
	{ "JOYSTICK_HIDAPI_PS5", SDL_HINT_JOYSTICK_HIDAPI_PS5 },
	{ "JOYSTICK_HIDAPI_PS5_PLAYER_LED", SDL_HINT_JOYSTICK_HIDAPI_PS5_PLAYER_LED },
	{ "JOYSTICK_HIDAPI_PS5_RUMBLE", SDL_HINT_JOYSTICK_HIDAPI_PS5_RUMBLE },
	{ "JOYSTICK_HIDAPI_STADIA", SDL_HINT_JOYSTICK_HIDAPI_STADIA },
	{ "JOYSTICK_HIDAPI_STEAM", SDL_HINT_JOYSTICK_HIDAPI_STEAM },
	{ "JOYSTICK_HIDAPI_SWITCH", SDL_HINT_JOYSTICK_HIDAPI_SWITCH },
	{ "JOYSTICK_HIDAPI_SWITCH_HOME_LED", SDL_HINT_JOYSTICK_HIDAPI_SWITCH_HOME_LED },
	{ "JOYSTICK_HIDAPI_XBOX", SDL_HINT_JOYSTICK_HIDAPI_XBOX },
	{ "JOYSTICK_RAWINPUT", SDL_HINT_JOYSTICK_RAWINPUT },
	{ "JOYSTICK_RAWINPUT_CORRELATE_XINPUT", SDL_HINT_JOYSTICK_RAWINPUT_CORRELATE_XINPUT },
	{ "JOYSTICK_THREAD", SDL_HINT_JOYSTICK_THREAD },
	{ "KMSDRM_REQUIRE_DRM_MASTER", SDL_HINT_KMSDRM_REQUIRE_DRM_MASTER },
	{ "JOYSTICK_DEVICE", SDL_HINT_JOYSTICK_DEVICE },
	{ "LINUX_JOYSTICK_CLASSIC", SDL_HINT_LINUX_JOYSTICK_CLASSIC },
	{ "LINUX_JOYSTICK_DEADZONES", SDL_HINT_LINUX_JOYSTICK_DEADZONES },
	{ "MAC_BACKGROUND_APP", SDL_HINT_MAC_BACKGROUND_APP },
	{ "MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK", SDL_HINT_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK },
	{ "MOUSE_DOUBLE_CLICK_RADIUS", SDL_HINT_MOUSE_DOUBLE_CLICK_RADIUS },
	{ "MOUSE_DOUBLE_CLICK_TIME", SDL_HINT_MOUSE_DOUBLE_CLICK_TIME },
	{ "MOUSE_FOCUS_CLICKTHROUGH", SDL_HINT_MOUSE_FOCUS_CLICKTHROUGH },
	{ "MOUSE_NORMAL_SPEED_SCALE", SDL_HINT_MOUSE_NORMAL_SPEED_SCALE },
	{ "MOUSE_RELATIVE_MODE_WARP", SDL_HINT_MOUSE_RELATIVE_MODE_WARP },
	{ "MOUSE_RELATIVE_SCALING", SDL_HINT_MOUSE_RELATIVE_SCALING },
	{ "MOUSE_RELATIVE_SPEED_SCALE", SDL_HINT_MOUSE_RELATIVE_SPEED_SCALE },
	{ "MOUSE_TOUCH_EVENTS", SDL_HINT_MOUSE_TOUCH_EVENTS },
	{ "NO_SIGNAL_HANDLERS", SDL_HINT_NO_SIGNAL_HANDLERS },
	{ "OPENGL_ES_DRIVER", SDL_HINT_OPENGL_ES_DRIVER },
	{ "ORIENTATIONS", SDL_HINT_ORIENTATIONS },
	{ "POLL_SENTINEL", SDL_HINT_POLL_SENTINEL },
	{ "PREFERRED_LOCALES", SDL_HINT_PREFERRED_LOCALES },
	{ "QTWAYLAND_CONTENT_ORIENTATION", SDL_HINT_QTWAYLAND_CONTENT_ORIENTATION },
	{ "QTWAYLAND_WINDOW_FLAGS", SDL_HINT_QTWAYLAND_WINDOW_FLAGS },
	{ "RENDER_BATCHING", SDL_HINT_RENDER_BATCHING },
	{ "RENDER_LINE_METHOD", SDL_HINT_RENDER_LINE_METHOD },
	{ "RENDER_DIRECT3D11_DEBUG", SDL_HINT_RENDER_DIRECT3D11_DEBUG },
	{ "RENDER_DIRECT3D_THREADSAFE", SDL_HINT_RENDER_DIRECT3D_THREADSAFE },
	{ "RENDER_DRIVER", SDL_HINT_RENDER_DRIVER },
	{ "RENDER_LOGICAL_SIZE_MODE", SDL_HINT_RENDER_LOGICAL_SIZE_MODE },
	{ "RENDER_OPENGL_SHADERS", SDL_HINT_RENDER_OPENGL_SHADERS },
	{ "RENDER_SCALE_QUALITY", SDL_HINT_RENDER_SCALE_QUALITY },
	{ "RENDER_VSYNC", SDL_HINT_RENDER_VSYNC },
	{ "RETURN_KEY_HIDES_IME", SDL_HINT_RETURN_KEY_HIDES_IME },
	{ "RPI_VIDEO_LAYER", SDL_HINT_RPI_VIDEO_LAYER },
	{ "SCREENSAVER_INHIBIT_ACTIVITY_NAME", SDL_HINT_SCREENSAVER_INHIBIT_ACTIVITY_NAME },
	{ "THREAD_FORCE_REALTIME_TIME_CRITICAL", SDL_HINT_THREAD_FORCE_REALTIME_TIME_CRITICAL },
	{ "THREAD_PRIORITY_POLICY", SDL_HINT_THREAD_PRIORITY_POLICY },
	{ "THREAD_STACK_SIZE", SDL_HINT_THREAD_STACK_SIZE },
	{ "TIMER_RESOLUTION", SDL_HINT_TIMER_RESOLUTION },
	{ "TOUCH_MOUSE_EVENTS", SDL_HINT_TOUCH_MOUSE_EVENTS },
	{ "TV_REMOTE_AS_JOYSTICK", SDL_HINT_TV_REMOTE_AS_JOYSTICK },
	{ "VIDEO_ALLOW_SCREENSAVER", SDL_HINT_VIDEO_ALLOW_SCREENSAVER },
	{ "VIDEO_DOUBLE_BUFFER", SDL_HINT_VIDEO_DOUBLE_BUFFER },
	{ "VIDEO_EGL_ALLOW_TRANSPARENCY", SDL_HINT_VIDEO_EGL_ALLOW_TRANSPARENCY },
	{ "VIDEO_EXTERNAL_CONTEXT", SDL_HINT_VIDEO_EXTERNAL_CONTEXT },
	{ "VIDEO_HIGHDPI_DISABLED", SDL_HINT_VIDEO_HIGHDPI_DISABLED },
	{ "VIDEO_MAC_FULLSCREEN_SPACES", SDL_HINT_VIDEO_MAC_FULLSCREEN_SPACES },
	{ "VIDEO_MINIMIZE_ON_FOCUS_LOSS", SDL_HINT_VIDEO_MINIMIZE_ON_FOCUS_LOSS },
	{ "VIDEO_WAYLAND_ALLOW_LIBDECOR", SDL_HINT_VIDEO_WAYLAND_ALLOW_LIBDECOR },
	{ "VIDEO_WINDOW_SHARE_PIXEL_FORMAT", SDL_HINT_VIDEO_WINDOW_SHARE_PIXEL_FORMAT },
	{ "VIDEO_WIN_D3DCOMPILER", SDL_HINT_VIDEO_WIN_D3DCOMPILER },
	{ "VIDEO_X11_FORCE_EGL", SDL_HINT_VIDEO_X11_FORCE_EGL },
	{ "VIDEO_X11_NET_WM_BYPASS_COMPOSITOR", SDL_HINT_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR },
	{ "VIDEO_X11_NET_WM_PING", SDL_HINT_VIDEO_X11_NET_WM_PING },
	{ "VIDEO_X11_WINDOW_VISUALID", SDL_HINT_VIDEO_X11_WINDOW_VISUALID },
	{ "VIDEO_X11_XINERAMA", SDL_HINT_VIDEO_X11_XINERAMA },
	{ "VIDEO_X11_XRANDR", SDL_HINT_VIDEO_X11_XRANDR },
	{ "VIDEO_X11_XVIDMODE", SDL_HINT_VIDEO_X11_XVIDMODE },
	{ "WAVE_FACT_CHUNK", SDL_HINT_WAVE_FACT_CHUNK },
	{ "WAVE_RIFF_CHUNK_SIZE", SDL_HINT_WAVE_RIFF_CHUNK_SIZE },
	{ "WAVE_TRUNCATION", SDL_HINT_WAVE_TRUNCATION },
	{ "WINDOWS_DISABLE_THREAD_NAMING", SDL_HINT_WINDOWS_DISABLE_THREAD_NAMING },
	{ "WINDOWS_ENABLE_MESSAGELOOP", SDL_HINT_WINDOWS_ENABLE_MESSAGELOOP },
	{ "WINDOWS_FORCE_MUTEX_CRITICAL_SECTIONS", SDL_HINT_WINDOWS_FORCE_MUTEX_CRITICAL_SECTIONS },
	{ "WINDOWS_FORCE_SEMAPHORE_KERNEL", SDL_HINT_WINDOWS_FORCE_SEMAPHORE_KERNEL },
	{ "WINDOWS_INTRESOURCE_ICON", SDL_HINT_WINDOWS_INTRESOURCE_ICON },
	{ "WINDOWS_INTRESOURCE_ICON_SMALL", SDL_HINT_WINDOWS_INTRESOURCE_ICON_SMALL },
	{ "WINDOWS_NO_CLOSE_ON_ALT_F4", SDL_HINT_WINDOWS_NO_CLOSE_ON_ALT_F4 },
	{ "WINDOWS_USE_D3D9EX", SDL_HINT_WINDOWS_USE_D3D9EX },
	{ "WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN", SDL_HINT_WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN },
	{ "WINDOW_NO_ACTIVATION_WHEN_SHOWN", SDL_HINT_WINDOW_NO_ACTIVATION_WHEN_SHOWN },
	{ "WINRT_HANDLE_BACK_BUTTON", SDL_HINT_WINRT_HANDLE_BACK_BUTTON },
	{ "WINRT_PRIVACY_POLICY_LABEL", SDL_HINT_WINRT_PRIVACY_POLICY_LABEL },
	{ "WINRT_PRIVACY_POLICY_URL", SDL_HINT_WINRT_PRIVACY_POLICY_URL },
	{ "X11_FORCE_OVERRIDE_REDIRECT", SDL_HINT_X11_FORCE_OVERRIDE_REDIRECT },
	{ "XINPUT_ENABLED", SDL_HINT_XINPUT_ENABLED },
	{ "XINPUT_USE_OLD_JOYSTICK_MAPPING", SDL_HINT_XINPUT_USE_OLD_JOYSTICK_MAPPING },
	{ "AUDIO_INCLUDE_MONITORS", SDL_HINT_AUDIO_INCLUDE_MONITORS },
	{ NULL, NULL }
};
inline const char* checkHint(lua_State* L, int index) {
	return  luaEXT_checksflag(L, index, flag_Hints);
}

// HintPriority

const luaEXT_constpair flag_HintPriority[] = {
	{ "DEFAULT", SDL_HINT_DEFAULT},
	{ "NORMAL", SDL_HINT_NORMAL},
	{ "OVERRIDE", SDL_HINT_OVERRIDE},
	{ NULL, NULL }
};
inline SDL_HintPriority checkHintPriority(lua_State* L, int index) {
	return (SDL_HintPriority)luaEXT_checkflag(L, index, flag_HintPriority);
}

// init
const luaEXT_constpair flag_init[] = {
	{ "TIMER", SDL_INIT_TIMER},
	{ "AUDIO", SDL_INIT_AUDIO },
	{ "VIDEO", SDL_INIT_VIDEO },
	{ "JOYSTICK", SDL_INIT_JOYSTICK },
	{ "HAPTIC", SDL_INIT_HAPTIC },
	{ "GAMECONTROLLER", SDL_INIT_GAMECONTROLLER },
	{ "EVENTS", SDL_INIT_EVENTS },
	{ "SENSOR", SDL_INIT_SENSOR },
	{ "EVERYTHING", SDL_INIT_EVERYTHING },
	{ NULL, 0}
};
inline Uint32 checkInit(lua_State* L, int index) {
	return (Uint32)luaEXT_checkflags(L, index, flag_init);
}

// KeyCode

const luaEXT_constpair flag_KeyCode[] = {
	{ "UNKNOWN", SDLK_UNKNOWN },
	{ "RETURN", SDLK_RETURN },
	{ "ESCAPE", SDLK_ESCAPE },
	{ "BACKSPACE", SDLK_BACKSPACE },
	{ "TAB", SDLK_TAB },
	{ "SPACE", SDLK_SPACE },
	{ "EXCLAIM", SDLK_EXCLAIM },
	{ "QUOTEDBL", SDLK_QUOTEDBL },
	{ "HASH", SDLK_HASH },
	{ "PERCENT", SDLK_PERCENT },
	{ "DOLLAR", SDLK_DOLLAR },
	{ "AMPERSAND", SDLK_AMPERSAND },
	{ "QUOTE", SDLK_QUOTE },
	{ "LEFTPAREN", SDLK_LEFTPAREN },
	{ "ASTERISK", SDLK_ASTERISK },
	{ "PLUS", SDLK_PLUS },
	{ "COMMA", SDLK_COMMA },
	{ "MINUS", SDLK_MINUS },
	{ "PERIOD", SDLK_PERIOD },
	{ "SLASH", SDLK_SLASH },
	{ "0", SDLK_0 },
	{ "1", SDLK_1 },
	{ "2", SDLK_2 },
	{ "3", SDLK_3 },
	{ "4", SDLK_4 },
	{ "5", SDLK_5 },
	{ "6", SDLK_6 },
	{ "7", SDLK_7 },
	{ "8", SDLK_8 },
	{ "9", SDLK_9 },
	{ "COLON", SDLK_COLON },
	{ "SEMICOLON", SDLK_SEMICOLON },
	{ "LESS", SDLK_LESS },
	{ "EQUALS", SDLK_EQUALS },
	{ "GREATER", SDLK_GREATER },
	{ "QUESTION", SDLK_QUESTION },
	{ "AT", SDLK_AT },
	{ "LEFTBRACKET", SDLK_LEFTBRACKET },
	{ "BACKSLASH", SDLK_BACKSLASH },
	{ "RIGHTBRACKET", SDLK_RIGHTBRACKET },
	{ "CARET", SDLK_CARET },
	{ "UNDERSCORE", SDLK_UNDERSCORE },
	{ "BACKQUOTE", SDLK_BACKQUOTE },
	{ "A", SDLK_a },
	{ "B", SDLK_b },
	{ "C", SDLK_c },
	{ "D", SDLK_d },
	{ "E", SDLK_e },
	{ "F", SDLK_f },
	{ "G", SDLK_g },
	{ "H", SDLK_h },
	{ "I", SDLK_i },
	{ "J", SDLK_j },
	{ "K", SDLK_k },
	{ "L", SDLK_l },
	{ "M", SDLK_m },
	{ "N", SDLK_n },
	{ "O", SDLK_o },
	{ "P", SDLK_p },
	{ "Q", SDLK_q },
	{ "R", SDLK_r },
	{ "S", SDLK_s },
	{ "T", SDLK_t },
	{ "U", SDLK_u },
	{ "V", SDLK_v },
	{ "W", SDLK_w },
	{ "X", SDLK_x },
	{ "Y", SDLK_y },
	{ "Z", SDLK_z },
	{ "CAPSLOCK", SDLK_CAPSLOCK },
	{ "F1", SDLK_F1 },
	{ "F2", SDLK_F2 },
	{ "F3", SDLK_F3 },
	{ "F4", SDLK_F4 },
	{ "F5", SDLK_F5 },
	{ "F6", SDLK_F6 },
	{ "F7", SDLK_F7 },
	{ "F8", SDLK_F8 },
	{ "F9", SDLK_F9 },
	{ "F10", SDLK_F10 },
	{ "F11", SDLK_F11 },
	{ "F12", SDLK_F12 },
	{ "PRINTSCREEN", SDLK_PRINTSCREEN },
	{ "SCROLLLOCK", SDLK_SCROLLLOCK },
	{ "PAUSE", SDLK_PAUSE },
	{ "INSERT", SDLK_INSERT },
	{ "HOME", SDLK_HOME },
	{ "PAGEUP", SDLK_PAGEUP },
	{ "DELETE", SDLK_DELETE },
	{ "END", SDLK_END },
	{ "PAGEDOWN", SDLK_PAGEDOWN },
	{ "RIGHT", SDLK_RIGHT },
	{ "LEFT", SDLK_LEFT },
	{ "DOWN", SDLK_DOWN },
	{ "UP", SDLK_UP },
	{ "NUMLOCKCLEAR", SDLK_NUMLOCKCLEAR },
	{ "KP_DIVIDE", SDLK_KP_DIVIDE },
	{ "KP_MULTIPLY", SDLK_KP_MULTIPLY },
	{ "KP_MINUS", SDLK_KP_MINUS },
	{ "KP_PLUS", SDLK_KP_PLUS },
	{ "KP_ENTER", SDLK_KP_ENTER },
	{ "KP_1", SDLK_KP_1 },
	{ "KP_2", SDLK_KP_2 },
	{ "KP_3", SDLK_KP_3 },
	{ "KP_4", SDLK_KP_4 },
	{ "KP_5", SDLK_KP_5 },
	{ "KP_6", SDLK_KP_6 },
	{ "KP_7", SDLK_KP_7 },
	{ "KP_8", SDLK_KP_8 },
	{ "KP_9", SDLK_KP_9 },
	{ "KP_0", SDLK_KP_0 },
	{ "KP_PERIOD", SDLK_KP_PERIOD },
	{ "APPLICATION", SDLK_APPLICATION },
	{ "POWER", SDLK_POWER },
	{ "KP_EQUALS", SDLK_KP_EQUALS },
	{ "F13", SDLK_F13 },
	{ "F14", SDLK_F14 },
	{ "F15", SDLK_F15 },
	{ "F16", SDLK_F16 },
	{ "F17", SDLK_F17 },
	{ "F18", SDLK_F18 },
	{ "F19", SDLK_F19 },
	{ "F20", SDLK_F20 },
	{ "F21", SDLK_F21 },
	{ "F22", SDLK_F22 },
	{ "F23", SDLK_F23 },
	{ "F24", SDLK_F24 },
	{ "EXECUTE", SDLK_EXECUTE },
	{ "HELP", SDLK_HELP },
	{ "MENU", SDLK_MENU },
	{ "SELECT", SDLK_SELECT },
	{ "STOP", SDLK_STOP },
	{ "AGAIN", SDLK_AGAIN },
	{ "UNDO", SDLK_UNDO },
	{ "CUT", SDLK_CUT },
	{ "COPY", SDLK_COPY },
	{ "PASTE", SDLK_PASTE },
	{ "FIND", SDLK_FIND },
	{ "MUTE", SDLK_MUTE },
	{ "VOLUMEUP", SDLK_VOLUMEUP },
	{ "VOLUMEDOWN", SDLK_VOLUMEDOWN },
	{ "KP_COMMA", SDLK_KP_COMMA },
	{ "KP_EQUALSAS400", SDLK_KP_EQUALSAS400 },
	{ "ALTERASE", SDLK_ALTERASE },
	{ "SYSREQ", SDLK_SYSREQ },
	{ "CANCEL", SDLK_CANCEL },
	{ "CLEAR", SDLK_CLEAR },
	{ "PRIOR", SDLK_PRIOR },
	{ "RETURN2", SDLK_RETURN2 },
	{ "SEPARATOR", SDLK_SEPARATOR },
	{ "OUT", SDLK_OUT },
	{ "OPER", SDLK_OPER },
	{ "CLEARAGAIN", SDLK_CLEARAGAIN },
	{ "CRSEL", SDLK_CRSEL },
	{ "EXSEL", SDLK_EXSEL },
	{ "KP_00", SDLK_KP_00 },
	{ "KP_000", SDLK_KP_000 },
	{ "THOUSANDSSEPARATOR", SDLK_THOUSANDSSEPARATOR },
	{ "DECIMALSEPARATOR", SDLK_DECIMALSEPARATOR },
	{ "CURRENCYUNIT", SDLK_CURRENCYUNIT },
	{ "CURRENCYSUBUNIT", SDLK_CURRENCYSUBUNIT },
	{ "KP_LEFTPAREN", SDLK_KP_LEFTPAREN },
	{ "KP_RIGHTPAREN", SDLK_KP_RIGHTPAREN },
	{ "KP_LEFTBRACE", SDLK_KP_LEFTBRACE },
	{ "KP_RIGHTBRACE", SDLK_KP_RIGHTBRACE },
	{ "KP_TAB", SDLK_KP_TAB },
	{ "KP_BACKSPACE", SDLK_KP_BACKSPACE },
	{ "KP_A", SDLK_KP_A },
	{ "KP_B", SDLK_KP_B },
	{ "KP_C", SDLK_KP_C },
	{ "KP_D", SDLK_KP_D },
	{ "KP_E", SDLK_KP_E },
	{ "KP_F", SDLK_KP_F },
	{ "KP_XOR", SDLK_KP_XOR },
	{ "KP_POWER", SDLK_KP_POWER },
	{ "KP_PERCENT", SDLK_KP_PERCENT },
	{ "KP_LESS", SDLK_KP_LESS },
	{ "KP_GREATER", SDLK_KP_GREATER },
	{ "KP_AMPERSAND", SDLK_KP_AMPERSAND },
	{ "KP_DBLAMPERSAND", SDLK_KP_DBLAMPERSAND },
	{ "KP_VERTICALBAR", SDLK_KP_VERTICALBAR },
	{ "KP_DBLVERTICALBAR", SDLK_KP_DBLVERTICALBAR },
	{ "KP_COLON", SDLK_KP_COLON },
	{ "KP_HASH", SDLK_KP_HASH },
	{ "KP_SPACE", SDLK_KP_SPACE },
	{ "KP_AT", SDLK_KP_AT },
	{ "KP_EXCLAM", SDLK_KP_EXCLAM },
	{ "KP_MEMSTORE", SDLK_KP_MEMSTORE },
	{ "KP_MEMRECALL", SDLK_KP_MEMRECALL },
	{ "KP_MEMCLEAR", SDLK_KP_MEMCLEAR },
	{ "KP_MEMADD", SDLK_KP_MEMADD },
	{ "KP_MEMSUBTRACT", SDLK_KP_MEMSUBTRACT },
	{ "KP_MEMMULTIPLY", SDLK_KP_MEMMULTIPLY },
	{ "KP_MEMDIVIDE", SDLK_KP_MEMDIVIDE },
	{ "KP_PLUSMINUS", SDLK_KP_PLUSMINUS },
	{ "KP_CLEAR", SDLK_KP_CLEAR },
	{ "KP_CLEARENTRY", SDLK_KP_CLEARENTRY },
	{ "KP_BINARY", SDLK_KP_BINARY },
	{ "KP_OCTAL", SDLK_KP_OCTAL },
	{ "KP_DECIMAL", SDLK_KP_DECIMAL },
	{ "KP_HEXADECIMAL", SDLK_KP_HEXADECIMAL },
	{ "LCTRL", SDLK_LCTRL },
	{ "LSHIFT", SDLK_LSHIFT },
	{ "LALT", SDLK_LALT },
	{ "LGUI", SDLK_LGUI },
	{ "RCTRL", SDLK_RCTRL },
	{ "RSHIFT", SDLK_RSHIFT },
	{ "RALT", SDLK_RALT },
	{ "RGUI", SDLK_RGUI },
	{ "MODE", SDLK_MODE },
	{ "AUDIONEXT", SDLK_AUDIONEXT },
	{ "AUDIOPREV", SDLK_AUDIOPREV },
	{ "AUDIOSTOP", SDLK_AUDIOSTOP },
	{ "AUDIOPLAY", SDLK_AUDIOPLAY },
	{ "AUDIOMUTE", SDLK_AUDIOMUTE },
	{ "MEDIASELECT", SDLK_MEDIASELECT },
	{ "WWW", SDLK_WWW },
	{ "MAIL", SDLK_MAIL },
	{ "CALCULATOR", SDLK_CALCULATOR },
	{ "COMPUTER", SDLK_COMPUTER },
	{ "AC_SEARCH", SDLK_AC_SEARCH },
	{ "AC_HOME", SDLK_AC_HOME },
	{ "AC_BACK", SDLK_AC_BACK },
	{ "AC_FORWARD", SDLK_AC_FORWARD },
	{ "AC_STOP", SDLK_AC_STOP },
	{ "AC_REFRESH", SDLK_AC_REFRESH },
	{ "AC_BOOKMARKS", SDLK_AC_BOOKMARKS },
	{ "BRIGHTNESSDOWN", SDLK_BRIGHTNESSDOWN },
	{ "BRIGHTNESSUP", SDLK_BRIGHTNESSUP },
	{ "DISPLAYSWITCH", SDLK_DISPLAYSWITCH },
	{ "KBDILLUMTOGGLE", SDLK_KBDILLUMTOGGLE },
	{ "KBDILLUMDOWN", SDLK_KBDILLUMDOWN },
	{ "KBDILLUMUP", SDLK_KBDILLUMUP },
	{ "EJECT", SDLK_EJECT },
	{ "SLEEP", SDLK_SLEEP },
	{ "APP1", SDLK_APP1 },
	{ "APP2", SDLK_APP2 },
	{ "AUDIOREWIND", SDLK_AUDIOREWIND },
	{ "AUDIOFASTFORWARD", SDLK_AUDIOFASTFORWARD },
	{ "SOFTLEFT", SDLK_SOFTLEFT },
	{ "SOFTRIGHT", SDLK_SOFTRIGHT },
	{ "CALL", SDLK_CALL },
	{ "ENDCALL", SDLK_ENDCALL },


	{ NULL, NULL }
};
inline SDL_Keycode checkKeyCode(lua_State* L, int index) {
	return (SDL_Keycode)luaEXT_checkflagorinteger(L, index, flag_KeyCode);
}
inline void pushKeyCode(lua_State* L, SDL_Keycode value) {
	luaEXT_pushflagorinteger(L, value, flag_KeyCode);
}

// Keymod

const luaEXT_constpair flag_Keymod[] = {
	{ "NONE", KMOD_NONE },
	{ "LSHIFT", KMOD_LSHIFT },
	{ "RSHIFT", KMOD_RSHIFT },
	{ "LCTRL", KMOD_LCTRL },
	{ "RCTRL", KMOD_RCTRL },
	{ "LALT", KMOD_LALT },
	{ "RALT", KMOD_RALT },
	{ "LGUI", KMOD_LGUI },
	{ "RGUI", KMOD_RGUI },
	{ "NUM", KMOD_NUM },
	{ "CAPS", KMOD_CAPS },
	{ "MODE", KMOD_MODE },
	{ "SCROLL", KMOD_SCROLL },
	{ "CTRL", KMOD_CTRL },
	{ "SHIFT", KMOD_SHIFT },
	{ "ALT", KMOD_ALT },
	{ "GUI", KMOD_GUI },
	{ "RESERVED", KMOD_RESERVED },
	{ NULL, NULL }
};
inline SDL_Keymod checkKeymod(lua_State* L, int index) {
	return (SDL_Keymod)luaEXT_checkflagorinteger(L, index, flag_Keymod);
}
inline void pushKeymod(lua_State* L, SDL_Keymod value) {
	luaEXT_pushflags(L, value, flag_Keymod, false);
}

// MessageBox
const luaEXT_constpair flag_MessageBox[] = {
	{ "ERROR", SDL_MESSAGEBOX_ERROR},
	{ "WARNING", SDL_MESSAGEBOX_WARNING},
	{ "INFORMATION", SDL_MESSAGEBOX_INFORMATION},
	{ "BUTTONS_LEFT_TO_RIGHT", SDL_MESSAGEBOX_BUTTONS_LEFT_TO_RIGHT},
	{ "BUTTONS_RIGHT_TO_LEFT", SDL_MESSAGEBOX_BUTTONS_RIGHT_TO_LEFT},
	{ NULL, NULL }
};
inline SDL_MessageBoxFlags checkMessageBoxFlags(lua_State* L, int index) {
	return (SDL_MessageBoxFlags)luaEXT_checkflags(L, index, flag_MessageBox);
}

// MessageBoxButton

const luaEXT_constpair flag_MessageBoxButton[] = {
	{ "RETURNKEY", SDL_MESSAGEBOX_BUTTON_RETURNKEY_DEFAULT},
	{ "ESCAPEKEY", SDL_MESSAGEBOX_BUTTON_ESCAPEKEY_DEFAULT},
	{ NULL, NULL },
};
inline SDL_MessageBoxButtonFlags checkMessageBoxButtonFlags(lua_State* L, int index) {
	return (SDL_MessageBoxButtonFlags)luaEXT_checkflags(L, index, flag_MessageBoxButton);
}

// PixelFormatEnum

luaEXT_constpair flag_PixelFormatEnum[] = {
  { "UNKNOWN", SDL_PIXELFORMAT_UNKNOWN},
  { "INDEX1LSB", SDL_PIXELFORMAT_INDEX1LSB},
  { "INDEX1MSB", SDL_PIXELFORMAT_INDEX1MSB},
  { "INDEX4LSB", SDL_PIXELFORMAT_INDEX4LSB},
  { "INDEX4MSB", SDL_PIXELFORMAT_INDEX4MSB},
  { "INDEX8", SDL_PIXELFORMAT_INDEX8},
  { "RGB332", SDL_PIXELFORMAT_RGB332},
  { "XRGB4444", SDL_PIXELFORMAT_XRGB4444},
  { "RGB444", SDL_PIXELFORMAT_RGB444},
  { "XBGR4444", SDL_PIXELFORMAT_XBGR4444},
  { "BGR444", SDL_PIXELFORMAT_BGR444},
  { "XRGB1555", SDL_PIXELFORMAT_XRGB1555},
  { "RGB555", SDL_PIXELFORMAT_RGB555},
  { "XBGR1555", SDL_PIXELFORMAT_XBGR1555},
  { "BGR555", SDL_PIXELFORMAT_BGR555},
  { "ARGB4444", SDL_PIXELFORMAT_ARGB4444},
  { "RGBA4444", SDL_PIXELFORMAT_RGBA4444},
  { "ABGR4444", SDL_PIXELFORMAT_ABGR4444},
  { "BGRA4444", SDL_PIXELFORMAT_BGRA4444},
  { "ARGB1555", SDL_PIXELFORMAT_ARGB1555},
  { "RGBA5551", SDL_PIXELFORMAT_RGBA5551},
  { "ABGR1555", SDL_PIXELFORMAT_ABGR1555},
  { "BGRA5551", SDL_PIXELFORMAT_BGRA5551},
  { "RGB565", SDL_PIXELFORMAT_RGB565},
  { "BGR565", SDL_PIXELFORMAT_BGR565},
  { "RGB24", SDL_PIXELFORMAT_RGB24},
  { "BGR24", SDL_PIXELFORMAT_BGR24},
  { "XRGB8888", SDL_PIXELFORMAT_XRGB8888},
  { "RGB888", SDL_PIXELFORMAT_RGB888},
  { "RGBX8888", SDL_PIXELFORMAT_RGBX8888},
  { "XBGR8888", SDL_PIXELFORMAT_XBGR8888},
  { "BGR888", SDL_PIXELFORMAT_BGR888},
  { "BGRX8888", SDL_PIXELFORMAT_BGRX8888},
  { "ARGB8888", SDL_PIXELFORMAT_ARGB8888},
  { "RGBA8888", SDL_PIXELFORMAT_RGBA8888},
  { "ABGR8888", SDL_PIXELFORMAT_ABGR8888},
  { "BGRA8888", SDL_PIXELFORMAT_BGRA8888},
  { "ARGB2101010", SDL_PIXELFORMAT_ARGB2101010},
  { "RGBA32", SDL_PIXELFORMAT_RGBA32},
  { "ARGB32", SDL_PIXELFORMAT_ARGB32},
  { "BGRA32", SDL_PIXELFORMAT_BGRA32},
  { "ABGR32", SDL_PIXELFORMAT_ABGR32},
  { "YV12", SDL_PIXELFORMAT_YV12},
  { "IYUV", SDL_PIXELFORMAT_IYUV},
  { "YUY2", SDL_PIXELFORMAT_YUY2},
  { "UYVY", SDL_PIXELFORMAT_UYVY},
  { "YVYU", SDL_PIXELFORMAT_YVYU},
  { "NV12", SDL_PIXELFORMAT_NV12},
  { "NV21", SDL_PIXELFORMAT_NV21},
  { "EXTERNAL_OES", SDL_PIXELFORMAT_EXTERNAL_OES},
  { NULL, NULL }
};
inline SDL_PixelFormatEnum checkPixelFormatEnum(lua_State* L, int index) {
	return (SDL_PixelFormatEnum)luaEXT_checkflag(L, index, flag_PixelFormatEnum);
}
inline void pushPixelFormatEnum(lua_State* L, SDL_PixelFormatEnum value) {
	luaEXT_pushflag(L, value, flag_PixelFormatEnum);
}

// PowerState

const luaEXT_constpair flag_PowerState[] = {
  { "UNKNOWN", SDL_POWERSTATE_UNKNOWN},
  { "ON_BATTERY", SDL_POWERSTATE_ON_BATTERY},
  { "NO_BATTERY", SDL_POWERSTATE_NO_BATTERY},
  { "CHARGING", SDL_POWERSTATE_CHARGING},
  { "CHARGED", SDL_POWERSTATE_CHARGED},
  { NULL, NULL}
};
inline void pushPowerState(lua_State* L, SDL_PowerState value) {
	luaEXT_pushflag(L, value, flag_PowerState);
}

// RenderFlags

const luaEXT_constpair flag_RendererFlags[] = {
	{ "SOFTWARE", SDL_RENDERER_SOFTWARE},
	{ "ACCELERATED", SDL_RENDERER_ACCELERATED},
	{ "PRESENTVSYNC", SDL_RENDERER_PRESENTVSYNC},
	{ "TARGETTEXTURE", SDL_RENDERER_TARGETTEXTURE},
	{ NULL, NULL }
};
inline int checkRendererFlags(lua_State* L, int index, int optional) {
	if (lua_isnoneornil(L, index)) {
		return optional;
	}
	return (int)luaEXT_checkflags(L, index, flag_RendererFlags);
}

// ScaleMode

const luaEXT_constpair flag_ScaleMode[] = {
	{ "NEAREST", SDL_ScaleModeNearest},
	{ "LINEAR", SDL_ScaleModeLinear},
	{ "BEST", SDL_ScaleModeBest},
	{ NULL, NULL }
};
inline SDL_ScaleMode checkScaleMode(lua_State* L, int index) {
	return (SDL_ScaleMode)luaEXT_checkflag(L, index, flag_ScaleMode);
}
inline void pushScaleMode(lua_State* L, SDL_ScaleMode value) {
	luaEXT_pushflag(L, value, flag_ScaleMode);
}

// TextureAccess

const luaEXT_constpair flag_TextureAccess[] = {
	{ "STATIC", SDL_TEXTUREACCESS_STATIC},
	{ "STREAMING", SDL_TEXTUREACCESS_STREAMING},
	{ "TARGET", SDL_TEXTUREACCESS_TARGET},
	{ NULL, NULL }
};
inline SDL_TextureAccess checkTextureAccess(lua_State* L, int index) {
	return (SDL_TextureAccess)luaEXT_checkflag(L, index, flag_TextureAccess);
}
inline void pushTextureAccess(lua_State* L, SDL_TextureAccess value) {
	luaEXT_pushflag(L, value, flag_TextureAccess);
}

// RendererFlip

const luaEXT_constpair flag_RendererFlip[] = {
	{ "NONE", SDL_FLIP_NONE},
	{ "HORIZONTAL", SDL_FLIP_HORIZONTAL},
	{ "VERTICAL", SDL_FLIP_VERTICAL},
	{ NULL, NULL }
};
inline SDL_RendererFlip checkRendererFlip(lua_State* L, int index) {
	return (SDL_RendererFlip)luaEXT_checkflags(L, index, flag_RendererFlip);
}

// Scancode

const luaEXT_constpair flag_Scancode[] = {
  { "UNKNOWN", SDL_SCANCODE_UNKNOWN },
  { "A", SDL_SCANCODE_A },
  { "B", SDL_SCANCODE_B },
  { "C", SDL_SCANCODE_C },
  { "D", SDL_SCANCODE_D },
  { "E", SDL_SCANCODE_E },
  { "F", SDL_SCANCODE_F },
  { "G", SDL_SCANCODE_G },
  { "H", SDL_SCANCODE_H },
  { "I", SDL_SCANCODE_I },
  { "J", SDL_SCANCODE_J },
  { "K", SDL_SCANCODE_K },
  { "L", SDL_SCANCODE_L },
  { "M", SDL_SCANCODE_M },
  { "N", SDL_SCANCODE_N },
  { "O", SDL_SCANCODE_O },
  { "P", SDL_SCANCODE_P },
  { "Q", SDL_SCANCODE_Q },
  { "R", SDL_SCANCODE_R },
  { "S", SDL_SCANCODE_S },
  { "T", SDL_SCANCODE_T },
  { "U", SDL_SCANCODE_U },
  { "V", SDL_SCANCODE_V },
  { "W", SDL_SCANCODE_W },
  { "X", SDL_SCANCODE_X },
  { "Y", SDL_SCANCODE_Y },
  { "Z", SDL_SCANCODE_Z },
  { "1", SDL_SCANCODE_1 },
  { "2", SDL_SCANCODE_2 },
  { "3", SDL_SCANCODE_3 },
  { "4", SDL_SCANCODE_4 },
  { "5", SDL_SCANCODE_5 },
  { "6", SDL_SCANCODE_6 },
  { "7", SDL_SCANCODE_7 },
  { "8", SDL_SCANCODE_8 },
  { "9", SDL_SCANCODE_9 },
  { "0", SDL_SCANCODE_0 },
  { "RETURN", SDL_SCANCODE_RETURN },
  { "ESCAPE", SDL_SCANCODE_ESCAPE },
  { "BACKSPACE", SDL_SCANCODE_BACKSPACE },
  { "TAB", SDL_SCANCODE_TAB },
  { "SPACE", SDL_SCANCODE_SPACE },
  { "MINUS", SDL_SCANCODE_MINUS },
  { "EQUALS", SDL_SCANCODE_EQUALS },
  { "LEFTBRACKET", SDL_SCANCODE_LEFTBRACKET },
  { "RIGHTBRACKET", SDL_SCANCODE_RIGHTBRACKET },
  { "BACKSLASH", SDL_SCANCODE_BACKSLASH },
  { "NONUSHASH", SDL_SCANCODE_NONUSHASH },
  { "SEMICOLON", SDL_SCANCODE_SEMICOLON },
  { "APOSTROPHE", SDL_SCANCODE_APOSTROPHE },
  { "GRAVE", SDL_SCANCODE_GRAVE },
  { "COMMA", SDL_SCANCODE_COMMA },
  { "PERIOD", SDL_SCANCODE_PERIOD },
  { "SLASH", SDL_SCANCODE_SLASH },
  { "CAPSLOCK", SDL_SCANCODE_CAPSLOCK },
  { "F1", SDL_SCANCODE_F1 },
  { "F2", SDL_SCANCODE_F2 },
  { "F3", SDL_SCANCODE_F3 },
  { "F4", SDL_SCANCODE_F4 },
  { "F5", SDL_SCANCODE_F5 },
  { "F6", SDL_SCANCODE_F6 },
  { "F7", SDL_SCANCODE_F7 },
  { "F8", SDL_SCANCODE_F8 },
  { "F9", SDL_SCANCODE_F9 },
  { "F10", SDL_SCANCODE_F10 },
  { "F11", SDL_SCANCODE_F11 },
  { "F12", SDL_SCANCODE_F12 },
  { "PRINTSCREEN", SDL_SCANCODE_PRINTSCREEN },
  { "SCROLLLOCK", SDL_SCANCODE_SCROLLLOCK },
  { "PAUSE", SDL_SCANCODE_PAUSE },
  { "INSERT", SDL_SCANCODE_INSERT },
  { "HOME", SDL_SCANCODE_HOME },
  { "PAGEUP", SDL_SCANCODE_PAGEUP },
  { "DELETE", SDL_SCANCODE_DELETE },
  { "END", SDL_SCANCODE_END },
  { "PAGEDOWN", SDL_SCANCODE_PAGEDOWN },
  { "RIGHT", SDL_SCANCODE_RIGHT },
  { "LEFT", SDL_SCANCODE_LEFT },
  { "DOWN", SDL_SCANCODE_DOWN },
  { "UP", SDL_SCANCODE_UP },
  { "NUMLOCKCLEAR", SDL_SCANCODE_NUMLOCKCLEAR },
  { "KP_DIVIDE", SDL_SCANCODE_KP_DIVIDE },
  { "KP_MULTIPLY", SDL_SCANCODE_KP_MULTIPLY },
  { "KP_MINUS", SDL_SCANCODE_KP_MINUS },
  { "KP_PLUS", SDL_SCANCODE_KP_PLUS },
  { "KP_ENTER", SDL_SCANCODE_KP_ENTER },
  { "KP_1", SDL_SCANCODE_KP_1 },
  { "KP_2", SDL_SCANCODE_KP_2 },
  { "KP_3", SDL_SCANCODE_KP_3 },
  { "KP_4", SDL_SCANCODE_KP_4 },
  { "KP_5", SDL_SCANCODE_KP_5 },
  { "KP_6", SDL_SCANCODE_KP_6 },
  { "KP_7", SDL_SCANCODE_KP_7 },
  { "KP_8", SDL_SCANCODE_KP_8 },
  { "KP_9", SDL_SCANCODE_KP_9 },
  { "KP_0", SDL_SCANCODE_KP_0 },
  { "KP_PERIOD", SDL_SCANCODE_KP_PERIOD },
  { "NONUSBACKSLASH", SDL_SCANCODE_NONUSBACKSLASH },
  { "APPLICATION", SDL_SCANCODE_APPLICATION },
  { "POWER", SDL_SCANCODE_POWER },
  { "KP_EQUALS", SDL_SCANCODE_KP_EQUALS },
  { "F13", SDL_SCANCODE_F13 },
  { "F14", SDL_SCANCODE_F14 },
  { "F15", SDL_SCANCODE_F15 },
  { "F16", SDL_SCANCODE_F16 },
  { "F17", SDL_SCANCODE_F17 },
  { "F18", SDL_SCANCODE_F18 },
  { "F19", SDL_SCANCODE_F19 },
  { "F20", SDL_SCANCODE_F20 },
  { "F21", SDL_SCANCODE_F21 },
  { "F22", SDL_SCANCODE_F22 },
  { "F23", SDL_SCANCODE_F23 },
  { "F24", SDL_SCANCODE_F24 },
  { "EXECUTE", SDL_SCANCODE_EXECUTE },
  { "HELP", SDL_SCANCODE_HELP },
  { "MENU", SDL_SCANCODE_MENU },
  { "SELECT", SDL_SCANCODE_SELECT },
  { "STOP", SDL_SCANCODE_STOP },
  { "AGAIN", SDL_SCANCODE_AGAIN },
  { "UNDO", SDL_SCANCODE_UNDO },
  { "CUT", SDL_SCANCODE_CUT },
  { "COPY", SDL_SCANCODE_COPY },
  { "PASTE", SDL_SCANCODE_PASTE },
  { "FIND", SDL_SCANCODE_FIND },
  { "MUTE", SDL_SCANCODE_MUTE },
  { "VOLUMEUP", SDL_SCANCODE_VOLUMEUP },
  { "VOLUMEDOWN", SDL_SCANCODE_VOLUMEDOWN },
  { "KP_COMMA", SDL_SCANCODE_KP_COMMA },
  { "KP_EQUALSAS400", SDL_SCANCODE_KP_EQUALSAS400 },
  { "INTERNATIONAL1", SDL_SCANCODE_INTERNATIONAL1 },
  { "INTERNATIONAL2", SDL_SCANCODE_INTERNATIONAL2 },
  { "INTERNATIONAL3", SDL_SCANCODE_INTERNATIONAL3 },
  { "INTERNATIONAL4", SDL_SCANCODE_INTERNATIONAL4 },
  { "INTERNATIONAL5", SDL_SCANCODE_INTERNATIONAL5 },
  { "INTERNATIONAL6", SDL_SCANCODE_INTERNATIONAL6 },
  { "INTERNATIONAL7", SDL_SCANCODE_INTERNATIONAL7 },
  { "INTERNATIONAL8", SDL_SCANCODE_INTERNATIONAL8 },
  { "INTERNATIONAL9", SDL_SCANCODE_INTERNATIONAL9 },
  { "LANG1", SDL_SCANCODE_LANG1 },
  { "LANG2", SDL_SCANCODE_LANG2 },
  { "LANG3", SDL_SCANCODE_LANG3 },
  { "LANG4", SDL_SCANCODE_LANG4 },
  { "LANG5", SDL_SCANCODE_LANG5 },
  { "LANG6", SDL_SCANCODE_LANG6 },
  { "LANG7", SDL_SCANCODE_LANG7 },
  { "LANG8", SDL_SCANCODE_LANG8 },
  { "LANG9", SDL_SCANCODE_LANG9 },
  { "ALTERASE", SDL_SCANCODE_ALTERASE },
  { "SYSREQ", SDL_SCANCODE_SYSREQ },
  { "CANCEL", SDL_SCANCODE_CANCEL },
  { "CLEAR", SDL_SCANCODE_CLEAR },
  { "PRIOR", SDL_SCANCODE_PRIOR },
  { "RETURN2", SDL_SCANCODE_RETURN2 },
  { "SEPARATOR", SDL_SCANCODE_SEPARATOR },
  { "OUT", SDL_SCANCODE_OUT },
  { "OPER", SDL_SCANCODE_OPER },
  { "CLEARAGAIN", SDL_SCANCODE_CLEARAGAIN },
  { "CRSEL", SDL_SCANCODE_CRSEL },
  { "EXSEL", SDL_SCANCODE_EXSEL },
  { "KP_00", SDL_SCANCODE_KP_00 },
  { "KP_000", SDL_SCANCODE_KP_000 },
  { "THOUSANDSSEPARATOR", SDL_SCANCODE_THOUSANDSSEPARATOR },
  { "DECIMALSEPARATOR", SDL_SCANCODE_DECIMALSEPARATOR },
  { "CURRENCYUNIT", SDL_SCANCODE_CURRENCYUNIT },
  { "CURRENCYSUBUNIT", SDL_SCANCODE_CURRENCYSUBUNIT },
  { "KP_LEFTPAREN", SDL_SCANCODE_KP_LEFTPAREN },
  { "KP_RIGHTPAREN", SDL_SCANCODE_KP_RIGHTPAREN },
  { "KP_LEFTBRACE", SDL_SCANCODE_KP_LEFTBRACE },
  { "KP_RIGHTBRACE", SDL_SCANCODE_KP_RIGHTBRACE },
  { "KP_TAB", SDL_SCANCODE_KP_TAB },
  { "KP_BACKSPACE", SDL_SCANCODE_KP_BACKSPACE },
  { "KP_A", SDL_SCANCODE_KP_A },
  { "KP_B", SDL_SCANCODE_KP_B },
  { "KP_C", SDL_SCANCODE_KP_C },
  { "KP_D", SDL_SCANCODE_KP_D },
  { "KP_E", SDL_SCANCODE_KP_E },
  { "KP_F", SDL_SCANCODE_KP_F },
  { "KP_XOR", SDL_SCANCODE_KP_XOR },
  { "KP_POWER", SDL_SCANCODE_KP_POWER },
  { "KP_PERCENT", SDL_SCANCODE_KP_PERCENT },
  { "KP_LESS", SDL_SCANCODE_KP_LESS },
  { "KP_GREATER", SDL_SCANCODE_KP_GREATER },
  { "KP_AMPERSAND", SDL_SCANCODE_KP_AMPERSAND },
  { "KP_DBLAMPERSAND", SDL_SCANCODE_KP_DBLAMPERSAND },
  { "KP_VERTICALBAR", SDL_SCANCODE_KP_VERTICALBAR },
  { "KP_DBLVERTICALBAR", SDL_SCANCODE_KP_DBLVERTICALBAR },
  { "KP_COLON", SDL_SCANCODE_KP_COLON },
  { "KP_HASH", SDL_SCANCODE_KP_HASH },
  { "KP_SPACE", SDL_SCANCODE_KP_SPACE },
  { "KP_AT", SDL_SCANCODE_KP_AT },
  { "KP_EXCLAM", SDL_SCANCODE_KP_EXCLAM },
  { "KP_MEMSTORE", SDL_SCANCODE_KP_MEMSTORE },
  { "KP_MEMRECALL", SDL_SCANCODE_KP_MEMRECALL },
  { "KP_MEMCLEAR", SDL_SCANCODE_KP_MEMCLEAR },
  { "KP_MEMADD", SDL_SCANCODE_KP_MEMADD },
  { "KP_MEMSUBTRACT", SDL_SCANCODE_KP_MEMSUBTRACT },
  { "KP_MEMMULTIPLY", SDL_SCANCODE_KP_MEMMULTIPLY },
  { "KP_MEMDIVIDE", SDL_SCANCODE_KP_MEMDIVIDE },
  { "KP_PLUSMINUS", SDL_SCANCODE_KP_PLUSMINUS },
  { "KP_CLEAR", SDL_SCANCODE_KP_CLEAR },
  { "KP_CLEARENTRY", SDL_SCANCODE_KP_CLEARENTRY },
  { "KP_BINARY", SDL_SCANCODE_KP_BINARY },
  { "KP_OCTAL", SDL_SCANCODE_KP_OCTAL },
  { "KP_DECIMAL", SDL_SCANCODE_KP_DECIMAL },
  { "KP_HEXADECIMAL", SDL_SCANCODE_KP_HEXADECIMAL },
  { "LCTRL", SDL_SCANCODE_LCTRL },
  { "LSHIFT", SDL_SCANCODE_LSHIFT },
  { "LALT", SDL_SCANCODE_LALT },
  { "LGUI", SDL_SCANCODE_LGUI },
  { "RCTRL", SDL_SCANCODE_RCTRL },
  { "RSHIFT", SDL_SCANCODE_RSHIFT },
  { "RALT", SDL_SCANCODE_RALT },
  { "RGUI", SDL_SCANCODE_RGUI },
  { "MODE", SDL_SCANCODE_MODE },
  { "AUDIONEXT", SDL_SCANCODE_AUDIONEXT },
  { "AUDIOPREV", SDL_SCANCODE_AUDIOPREV },
  { "AUDIOSTOP", SDL_SCANCODE_AUDIOSTOP },
  { "AUDIOPLAY", SDL_SCANCODE_AUDIOPLAY },
  { "AUDIOMUTE", SDL_SCANCODE_AUDIOMUTE },
  { "MEDIASELECT", SDL_SCANCODE_MEDIASELECT },
  { "WWW", SDL_SCANCODE_WWW },
  { "MAIL", SDL_SCANCODE_MAIL },
  { "CALCULATOR", SDL_SCANCODE_CALCULATOR },
  { "COMPUTER", SDL_SCANCODE_COMPUTER },
  { "AC_SEARCH", SDL_SCANCODE_AC_SEARCH },
  { "AC_HOME", SDL_SCANCODE_AC_HOME },
  { "AC_BACK", SDL_SCANCODE_AC_BACK },
  { "AC_FORWARD", SDL_SCANCODE_AC_FORWARD },
  { "AC_STOP", SDL_SCANCODE_AC_STOP },
  { "AC_REFRESH", SDL_SCANCODE_AC_REFRESH },
  { "AC_BOOKMARKS", SDL_SCANCODE_AC_BOOKMARKS },
  { "BRIGHTNESSDOWN", SDL_SCANCODE_BRIGHTNESSDOWN },
  { "BRIGHTNESSUP", SDL_SCANCODE_BRIGHTNESSUP },
  { "DISPLAYSWITCH", SDL_SCANCODE_DISPLAYSWITCH },
  { "KBDILLUMTOGGLE", SDL_SCANCODE_KBDILLUMTOGGLE },
  { "KBDILLUMDOWN", SDL_SCANCODE_KBDILLUMDOWN },
  { "KBDILLUMUP", SDL_SCANCODE_KBDILLUMUP },
  { "EJECT", SDL_SCANCODE_EJECT },
  { "SLEEP", SDL_SCANCODE_SLEEP },
  { "APP1", SDL_SCANCODE_APP1 },
  { "APP2", SDL_SCANCODE_APP2 },
  { "AUDIOREWIND", SDL_SCANCODE_AUDIOREWIND },
  { "AUDIOFASTFORWARD", SDL_SCANCODE_AUDIOFASTFORWARD },
  { "SOFTLEFT", SDL_SCANCODE_SOFTLEFT },
  { "SOFTRIGHT", SDL_SCANCODE_SOFTRIGHT },
  { "CALL", SDL_SCANCODE_CALL },
  { "ENDCALL", SDL_SCANCODE_ENDCALL },
  { "NUM_SCANCODES", SDL_NUM_SCANCODES },
  { NULL, NULL }
};
inline SDL_Scancode checkScancode(lua_State* L, int index) {
	return (SDL_Scancode)luaEXT_checkflagorinteger(L, index, flag_Scancode);
}
inline void pushScancode(lua_State* L, SDL_Scancode value) {
	luaEXT_pushflagorinteger(L, value, flag_Scancode);
}

// WindowFlags		
#define WINDOWFLAG_MASK    0xFFFFFFFF
#define WINDOWFLAG_SHAPED 0x100000000LL
const luaEXT_constpair flag_WindowFlags[] = {
	{ "NONE", 0},
	//{ "FULLSCREEN", SDL_WINDOW_FULLSCREEN},
	//{ "OPENGL", SDL_WINDOW_OPENGL},
	{ "SHOWN", SDL_WINDOW_SHOWN},
	{ "HIDDEN", SDL_WINDOW_HIDDEN},
	{ "BORDERLESS", SDL_WINDOW_BORDERLESS},
	{ "RESIZABLE", SDL_WINDOW_RESIZABLE},
	{ "MINIMIZED", SDL_WINDOW_MINIMIZED},
	{ "MAXIMIZED", SDL_WINDOW_MAXIMIZED},
	{ "MOUSE_GRABBED", SDL_WINDOW_MOUSE_GRABBED},
	{ "INPUT_FOCUS", SDL_WINDOW_INPUT_FOCUS},
	{ "MOUSE_FOCUS", SDL_WINDOW_MOUSE_FOCUS},
	{ "FULLSCREEN_DESKTOP", SDL_WINDOW_FULLSCREEN_DESKTOP},
	{ "FOREIGN", SDL_WINDOW_FOREIGN},
	{ "ALLOW_HIGHDPI", SDL_WINDOW_ALLOW_HIGHDPI},
	{ "MOUSE_CAPTURE", SDL_WINDOW_MOUSE_CAPTURE},
	{ "ALWAYS_ON_TOP", SDL_WINDOW_ALWAYS_ON_TOP},
	{ "SKIP_TASKBAR", SDL_WINDOW_SKIP_TASKBAR},
	{ "UTILITY", SDL_WINDOW_UTILITY},
	{ "TOOLTIP", SDL_WINDOW_TOOLTIP},
	{ "POPUP_MENU", SDL_WINDOW_POPUP_MENU},
	{ "KEYBOARD_GRABBED", SDL_WINDOW_KEYBOARD_GRABBED},
	//{ "VULKAN", SDL_WINDOW_VULKAN},
	//{ "METAL", SDL_WINDOW_METAL},
	{ "INPUT_GRABBED", SDL_WINDOW_INPUT_GRABBED},
	{ "SHAPED", WINDOWFLAG_SHAPED},
	{ NULL,NULL }
};
inline uint64_t checkWindowFlags(lua_State* L, int index, uint64_t optional) {
	if (lua_isnoneornil(L, index)) {
		return optional;
	}
	return (uint64_t)luaEXT_checkflags(L, index, flag_WindowFlags);
}
inline void pushWindowFlags(lua_State* L, uint64_t value) {
	luaEXT_pushflags(L, value, flag_WindowFlags, true);
}

// WindowFullscreen

const luaEXT_constpair flag_WindowFullscreen[] = {
	{ "WINDOW", 0},
	//{ "FULLSCREEN", SDL_WINDOW_FULLSCREEN},
	{ "FULLSCREEN_DESKTOP", SDL_WINDOW_FULLSCREEN_DESKTOP},
	{ NULL,NULL }
};
inline Uint32 checkWindowFullscreen(lua_State* L, int index) {
	return (Uint32)luaEXT_checkflag(L, index, flag_WindowFullscreen);
}

// WindowPos

const luaEXT_constpair flag_windowpos[] = {
	{ "UNDEFINED", SDL_WINDOWPOS_UNDEFINED},
	{ "UNDEFINED_DISPLAY0",SDL_WINDOWPOS_UNDEFINED_DISPLAY(0) },
	{ "UNDEFINED_DISPLAY1",SDL_WINDOWPOS_UNDEFINED_DISPLAY(1) },
	{ "UNDEFINED_DISPLAY2",SDL_WINDOWPOS_UNDEFINED_DISPLAY(2) },
	{ "UNDEFINED_DISPLAY3",SDL_WINDOWPOS_UNDEFINED_DISPLAY(3) },
	{ "UNDEFINED_DISPLAY4",SDL_WINDOWPOS_UNDEFINED_DISPLAY(4) },
	{ "UNDEFINED_DISPLAY5",SDL_WINDOWPOS_UNDEFINED_DISPLAY(5) },
	{ "UNDEFINED_DISPLAY6",SDL_WINDOWPOS_UNDEFINED_DISPLAY(6) },
	{ "UNDEFINED_DISPLAY7",SDL_WINDOWPOS_UNDEFINED_DISPLAY(7) },
	{ "UNDEFINED_DISPLAY8",SDL_WINDOWPOS_UNDEFINED_DISPLAY(8) },
	{ "UNDEFINED_DISPLAY9",SDL_WINDOWPOS_UNDEFINED_DISPLAY(9) },
	{ "CENTERED", SDL_WINDOWPOS_CENTERED },
	{ "CENTERED_DISPLAY0", SDL_WINDOWPOS_CENTERED_DISPLAY(0) },
	{ "CENTERED_DISPLAY1", SDL_WINDOWPOS_CENTERED_DISPLAY(1) },
	{ "CENTERED_DISPLAY2", SDL_WINDOWPOS_CENTERED_DISPLAY(2) },
	{ "CENTERED_DISPLAY3", SDL_WINDOWPOS_CENTERED_DISPLAY(3) },
	{ "CENTERED_DISPLAY4", SDL_WINDOWPOS_CENTERED_DISPLAY(4) },
	{ "CENTERED_DISPLAY5", SDL_WINDOWPOS_CENTERED_DISPLAY(5) },
	{ "CENTERED_DISPLAY6", SDL_WINDOWPOS_CENTERED_DISPLAY(6) },
	{ "CENTERED_DISPLAY7", SDL_WINDOWPOS_CENTERED_DISPLAY(7) },
	{ "CENTERED_DISPLAY8", SDL_WINDOWPOS_CENTERED_DISPLAY(8) },
	{ "CENTERED_DISPLAY9", SDL_WINDOWPOS_CENTERED_DISPLAY(9) },
	{ NULL,NULL }
};
inline int checkWindowPos(lua_State* L, int index) {
	return (int)luaEXT_checkflagorinteger(L, index, flag_windowpos);
}

// WindowEventID

const luaEXT_constpair flag_WindowEventID[] = {
	{ "SHOWN", SDL_WINDOWEVENT_SHOWN},
	{ "HIDDEN", SDL_WINDOWEVENT_HIDDEN},
	{ "EXPOSED", SDL_WINDOWEVENT_EXPOSED},
	{ "MOVED", SDL_WINDOWEVENT_MOVED},
	{ "RESIZED", SDL_WINDOWEVENT_RESIZED},
	{ "SIZE_CHANGED", SDL_WINDOWEVENT_SIZE_CHANGED},
	{ "MINIMIZED", SDL_WINDOWEVENT_MINIMIZED},
	{ "MAXIMIZED", SDL_WINDOWEVENT_MAXIMIZED},
	{ "RESTORED", SDL_WINDOWEVENT_RESTORED},
	{ "ENTER", SDL_WINDOWEVENT_ENTER},
	{ "LEAVE", SDL_WINDOWEVENT_LEAVE},
	{ "FOCUS_GAINED", SDL_WINDOWEVENT_FOCUS_GAINED},
	{ "FOCUS_LOST", SDL_WINDOWEVENT_FOCUS_LOST},
	{ "CLOSE", SDL_WINDOWEVENT_CLOSE},
	{ "TAKE_FOCUS", SDL_WINDOWEVENT_TAKE_FOCUS},
	{ "HIT_TEST", SDL_WINDOWEVENT_HIT_TEST},
	{ "ICCPROF_CHANGED", SDL_WINDOWEVENT_ICCPROF_CHANGED},
	{ "DISPLAY_CHANGED", SDL_WINDOWEVENT_DISPLAY_CHANGED},
	{ NULL,NULL }
};

// DisplayEventID

const luaEXT_constpair flag_DisplayEventID[] = {
	{ "ORIENTATION", SDL_DISPLAYEVENT_ORIENTATION},
	{ "CONNECTED", SDL_DISPLAYEVENT_CONNECTED},
	{ "DISCONNECTED", SDL_DISPLAYEVENT_DISCONNECTED},
	{ NULL,NULL }
};

// DisplayOrientation

const luaEXT_constpair flag_DisplayOrientation[] = {
	{ "UNKNOWN", SDL_ORIENTATION_UNKNOWN},
	{ "LANDSCAPE", SDL_ORIENTATION_LANDSCAPE},
	{ "LANDSCAPE_FLIPPED", SDL_ORIENTATION_LANDSCAPE_FLIPPED},
	{ "PORTRAIT", SDL_ORIENTATION_PORTRAIT},
	{ "PORTRAIT_FLIPPED", SDL_ORIENTATION_PORTRAIT_FLIPPED},
	{ NULL,NULL }
};
inline void pushDisplayOrientation(lua_State* L, SDL_DisplayOrientation value) {
	luaEXT_pushflag(L, value, flag_DisplayOrientation);
}

// FlashOperation

const luaEXT_constpair flag_FlashOperation[] = {
	{ "CANCEL", SDL_FLASH_CANCEL},
	{ "BRIEFLY", SDL_FLASH_BRIEFLY},
	{ "UNTIL_FOCUSED", SDL_FLASH_UNTIL_FOCUSED},
	{ NULL, NULL }
};
inline SDL_FlashOperation checkFlashOperation(lua_State* L, int index) {
	return (SDL_FlashOperation)luaEXT_checkflag(L, index, flag_FlashOperation);
}

// YUV_Conversion

const luaEXT_constpair flag_YUV_Conversion[] = {
	{"JPEG", SDL_YUV_CONVERSION_JPEG},
	{"BT601", SDL_YUV_CONVERSION_BT601},
	{"BT709", SDL_YUV_CONVERSION_BT709},
	{"AUTOMATIC", SDL_YUV_CONVERSION_AUTOMATIC},
	{NULL,NULL}
};
inline SDL_YUV_CONVERSION_MODE checkYUV_CONVERSION_MODE(lua_State* L, int index) {
	return (SDL_YUV_CONVERSION_MODE)luaEXT_checkflag(L, index, flag_YUV_Conversion);
}
inline void pushYUV_CONVERSION_MODE(lua_State* L, SDL_YUV_CONVERSION_MODE value) {
	luaEXT_pushflag(L, value, flag_YUV_Conversion);
}

// SystemCursor

const luaEXT_constpair flag_SystemCursor[] = {
	{ "ARROW", SDL_SYSTEM_CURSOR_ARROW},
	{ "IBEAM", SDL_SYSTEM_CURSOR_IBEAM},
	{ "WAIT", SDL_SYSTEM_CURSOR_WAIT},
	{ "CROSSHAIR", SDL_SYSTEM_CURSOR_CROSSHAIR},
	{ "WAITARROW", SDL_SYSTEM_CURSOR_WAITARROW},
	{ "SIZENWSE", SDL_SYSTEM_CURSOR_SIZENWSE},
	{ "SIZENESW", SDL_SYSTEM_CURSOR_SIZENESW},
	{ "SIZEWE", SDL_SYSTEM_CURSOR_SIZEWE},
	{ "SIZENS", SDL_SYSTEM_CURSOR_SIZENS},
	{ "SIZEALL", SDL_SYSTEM_CURSOR_SIZEALL},
	{ "NO", SDL_SYSTEM_CURSOR_NO},
	{ "HAND", SDL_SYSTEM_CURSOR_HAND},
	{ NULL,NULL}
};
inline SDL_SystemCursor checkSystemCursor(lua_State* L, int index) {
	return (SDL_SystemCursor)luaEXT_checkflag(L, index, flag_SystemCursor);
}
inline void pushSystemCursor(lua_State* L, SDL_SystemCursor value) {
	luaEXT_pushflag(L, value, flag_SystemCursor);
}

// ButtonState

//#define buttonstate(s) ((s)? "PRESSED" : "RELEASED")
//inline void pushButtonState(lua_State* L, int s) {
//	lua_pushboolean(L, s);
//}

// MouseWheel

const luaEXT_constpair flag_MouseWheel[] = {
	{ "NORMAL", SDL_MOUSEWHEEL_NORMAL},
	{ "FLIPPED", SDL_MOUSEWHEEL_FLIPPED},
	{ NULL,NULL }
};

// MouseButton

const luaEXT_constpair flag_MouseButton[] = {
	{ "NONE",0},
	{ "LEFT"	,0x0001},
	{ "MIDDLE"	,0x0002},
	{ "RIGHT"	,0x0004},
	{ "X1"		,0x0008},
	{ "X2"		,0x0010},
	{ "X3"		,0x0020},
	{ "X4"		,0x0040},
	{ "X5"		,0x0080},
	{ "X6"		,0x0100},
	{ "X7"		,0x0200},
	{ "X8"		,0x0400},
	{ "X9"		,0x0800},
	{ "X10"		,0x1000},
	{ "X11"		,0x2000},
	{ "X12"		,0x4000},
	{ "X13"		,0x8000},
	{NULL,NULL}
};
inline Uint32 checkMouseButton(lua_State* L, int index) {
	return (Uint32)luaEXT_checkflags(L, index, flag_MouseButton);
}
inline void  pushMouseButton(lua_State* L, Uint32 value) {
	luaEXT_pushflags(L, value, flag_MouseButton, true);
}

// JoystickType

const luaEXT_constpair flag_JoystickType[] = {
	{ "UNKNOWN", SDL_JOYSTICK_TYPE_UNKNOWN },
	{ "GAMECONTROLLER", SDL_JOYSTICK_TYPE_GAMECONTROLLER},
	{ "WHEEL", SDL_JOYSTICK_TYPE_WHEEL},
	{ "ARCADE_STICK", SDL_JOYSTICK_TYPE_ARCADE_STICK},
	{ "FLIGHT_STICK", SDL_JOYSTICK_TYPE_FLIGHT_STICK},
	{ "DANCE_PAD", SDL_JOYSTICK_TYPE_DANCE_PAD},
	{ "GUITAR", SDL_JOYSTICK_TYPE_GUITAR},
	{ "DRUM_KIT", SDL_JOYSTICK_TYPE_DRUM_KIT},
	{ "ARCADE_PAD", SDL_JOYSTICK_TYPE_ARCADE_PAD},
	{ "THROTTLE", SDL_JOYSTICK_TYPE_THROTTLE},
	{NULL, NULL}
};
inline SDL_JoystickType checkJoystickType(lua_State* L, int index) {
	return (SDL_JoystickType)luaEXT_checkflag(L, index, flag_JoystickType);
}
inline void pushJoystickType(lua_State* L, SDL_JoystickType value) {
	luaEXT_pushflag(L, value, flag_MouseButton);
}

// JoystickPower

const luaEXT_constpair flag_JoystickPower[] = {
	{ "UNKNOWN", SDL_JOYSTICK_POWER_UNKNOWN},
	{ "EMPTY", SDL_JOYSTICK_POWER_EMPTY},
	{ "LOW", SDL_JOYSTICK_POWER_LOW},
	{ "MEDIUM", SDL_JOYSTICK_POWER_MEDIUM},
	{ "FULL", SDL_JOYSTICK_POWER_FULL},
	{ "WIRED", SDL_JOYSTICK_POWER_WIRED},
	{ "MAX", SDL_JOYSTICK_POWER_MAX},
	{NULL, NULL}
};
inline SDL_JoystickPowerLevel checkJoystickPowerLevel(lua_State* L, int index) {
	return (SDL_JoystickPowerLevel)luaEXT_checkflag(L, index, flag_JoystickPower);
}
inline void pushJoystickPowerLevel(lua_State* L, SDL_JoystickPowerLevel value) {
	luaEXT_pushflag(L, value, flag_JoystickPower);
}

// JoystickHat

const luaEXT_constpair flag_JoystickHat[] = {
	{"CENTERED", SDL_HAT_CENTERED},
	{"UP", SDL_HAT_UP},
	{"RIGHT", SDL_HAT_RIGHT},
	{"DOWN", SDL_HAT_DOWN},
	{"LEFT", SDL_HAT_LEFT},
	{NULL,NULL}
};
inline Uint8 checkJoystickHat(lua_State* L, int index) {
	return (Uint8)luaEXT_checkflags(L, index, flag_JoystickHat);
}
inline void pushJoystickHat(lua_State* L, Uint8 value) {
	luaEXT_pushflags(L, value, flag_JoystickHat, true);
}

// SensorType

const luaEXT_constpair flag_SensorType[] = {
	{"INVALID", SDL_SENSOR_INVALID},
	{"UNKNOWN", SDL_SENSOR_UNKNOWN},
	{"ACCEL", SDL_SENSOR_ACCEL},
	{"GYRO", SDL_SENSOR_GYRO},
	{NULL,NULL}
};
inline SDL_SensorType checkSensorType(lua_State* L, int index) {
	return (SDL_SensorType)luaEXT_checkflag(L, index, flag_SensorType);
}
inline void pushSensorType(lua_State* L, SDL_SensorType value) {
	luaEXT_pushflag(L, value, flag_SensorType);
}

// GameControllerType

const luaEXT_constpair flag_GameControllerType[] = {
	{ "UNKNOWN", SDL_CONTROLLER_TYPE_UNKNOWN},
	{ "XBOX360", SDL_CONTROLLER_TYPE_XBOX360},
	{ "XBOXONE", SDL_CONTROLLER_TYPE_XBOXONE},
	{ "PS3", SDL_CONTROLLER_TYPE_PS3},
	{ "PS4", SDL_CONTROLLER_TYPE_PS4},
	{ "NINTENDO_SWITCH_PRO", SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_PRO},
	{ "VIRTUAL", SDL_CONTROLLER_TYPE_VIRTUAL},
	{ "PS5", SDL_CONTROLLER_TYPE_PS5},
	{ "AMAZON_LUNA", SDL_CONTROLLER_TYPE_AMAZON_LUNA},
	{ "GOOGLE_STADIA", SDL_CONTROLLER_TYPE_GOOGLE_STADIA},
	{ "NVIDIA_SHIELD", SDL_CONTROLLER_TYPE_NVIDIA_SHIELD},
	{ "NINTENDO_SWITCH_JOYCON_LEFT", SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_JOYCON_LEFT},
	{ "NINTENDO_SWITCH_JOYCON_RIGHT", SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_JOYCON_RIGHT},
	{ "NINTENDO_SWITCH_JOYCON_PAIR", SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_JOYCON_PAIR},
	{NULL, NULL}
};
inline SDL_GameControllerType checkGameControllerType(lua_State* L, int index) {
	return (SDL_GameControllerType)luaEXT_checkflag(L, index, flag_GameControllerType);
}
inline void pushGameControllerType(lua_State* L, SDL_GameControllerType value) {
	luaEXT_pushflag(L, value, flag_GameControllerType);
}

// GameControllerAxis

const luaEXT_constpair flag_GameControllerAxis[] = {
	{ "INVALID", SDL_CONTROLLER_AXIS_INVALID},
	{ "LEFTX", SDL_CONTROLLER_AXIS_LEFTX},
	{ "LEFTY", SDL_CONTROLLER_AXIS_LEFTY},
	{ "RIGHTX", SDL_CONTROLLER_AXIS_RIGHTX},
	{ "RIGHTY", SDL_CONTROLLER_AXIS_RIGHTY},
	{ "TRIGGERLEFT", SDL_CONTROLLER_AXIS_TRIGGERLEFT},
	{ "TRIGGERRIGHT", SDL_CONTROLLER_AXIS_TRIGGERRIGHT},
	{ "MAX", SDL_CONTROLLER_AXIS_MAX},
	{NULL, NULL}
};
inline SDL_GameControllerAxis checkGameControllerAxis(lua_State* L, int index) {
	return (SDL_GameControllerAxis)luaEXT_checkflag(L, index, flag_GameControllerAxis);
}
inline void pushGameControllerAxis(lua_State* L, SDL_GameControllerAxis value) {
	luaEXT_pushflag(L, value, flag_GameControllerAxis);
}

// GameControllerButton

const luaEXT_constpair flag_GameControllerButton[] = {
	{ "INVALID", SDL_CONTROLLER_BUTTON_INVALID},
	{ "A", SDL_CONTROLLER_BUTTON_A},
	{ "B", SDL_CONTROLLER_BUTTON_B},
	{ "X", SDL_CONTROLLER_BUTTON_X},
	{ "Y", SDL_CONTROLLER_BUTTON_Y},
	{ "BACK", SDL_CONTROLLER_BUTTON_BACK},
	{ "GUIDE", SDL_CONTROLLER_BUTTON_GUIDE},
	{ "START", SDL_CONTROLLER_BUTTON_START},
	{ "LEFTSTICK", SDL_CONTROLLER_BUTTON_LEFTSTICK},
	{ "RIGHTSTICK", SDL_CONTROLLER_BUTTON_RIGHTSTICK},
	{ "LEFTSHOULDER", SDL_CONTROLLER_BUTTON_LEFTSHOULDER},
	{ "RIGHTSHOULDER", SDL_CONTROLLER_BUTTON_RIGHTSHOULDER},
	{ "DPAD_UP", SDL_CONTROLLER_BUTTON_DPAD_UP},
	{ "DPAD_DOWN", SDL_CONTROLLER_BUTTON_DPAD_DOWN},
	{ "DPAD_LEFT", SDL_CONTROLLER_BUTTON_DPAD_LEFT},
	{ "DPAD_RIGHT", SDL_CONTROLLER_BUTTON_DPAD_RIGHT},
	{ "MISC1", SDL_CONTROLLER_BUTTON_MISC1},
	{ "PADDLE1", SDL_CONTROLLER_BUTTON_PADDLE1},
	{ "PADDLE2", SDL_CONTROLLER_BUTTON_PADDLE2},
	{ "PADDLE3", SDL_CONTROLLER_BUTTON_PADDLE3},
	{ "PADDLE4", SDL_CONTROLLER_BUTTON_PADDLE4},
	{ "TOUCHPAD", SDL_CONTROLLER_BUTTON_TOUCHPAD},
	{ "MAX", SDL_CONTROLLER_BUTTON_MAX},
	{ NULL, NULL }
};
inline SDL_GameControllerButton checkGameControllerButton(lua_State* L, int index) {
	return (SDL_GameControllerButton)luaEXT_checkflag(L, index, flag_GameControllerButton);
}
inline void pushGameControllerButton(lua_State* L, SDL_GameControllerButton value) {
	luaEXT_pushflag(L, value, flag_GameControllerButton);
}

// TouchDeviceType

const luaEXT_constpair flag_TouchDeviceType[] = {
	{ "INVALID", SDL_TOUCH_DEVICE_INVALID},
	{ "DIRECT", SDL_TOUCH_DEVICE_DIRECT},
	{ "INDIRECT_ABSOLUTE", SDL_TOUCH_DEVICE_INDIRECT_ABSOLUTE},
	{ "INDIRECT_RELATIVE", SDL_TOUCH_DEVICE_INDIRECT_RELATIVE},
	{ NULL,NULL}
};
inline SDL_TouchDeviceType checkTouchDeviceType(lua_State* L, int index) {
	return (SDL_TouchDeviceType)luaEXT_checkflag(L, index, flag_TouchDeviceType);
}
inline void pushTouchDeviceType(lua_State* L, SDL_TouchDeviceType value) {
	luaEXT_pushflag(L, value, flag_TouchDeviceType);
}

// RWSeek

const luaEXT_constpair flag_RWSeek[] = {
	{"SET", RW_SEEK_SET},
	{"CUR", RW_SEEK_CUR},
	{"END", RW_SEEK_END},
	{NULL,NULL}
};
inline int checkRWSeek(lua_State* L, int index) {
	return (int)luaEXT_checkflag(L, index, flag_RWSeek);
}
inline void pushRWseek(lua_State* L, int value) {
	luaEXT_pushflag(L, value, flag_RWSeek);
}

// RWMode

const luaEXT_stringpair flag_RWMode[] = {
	{"READ","rb"},
	{"CREATE","wb+"},
	{"APPEND","ab+"},
	{"OPEN","rb+"},
	{NULL,NULL}
};
inline const char* checkRWMode(lua_State* L, int index) {
	return luaEXT_checksflag(L, index, flag_RWMode);
}

